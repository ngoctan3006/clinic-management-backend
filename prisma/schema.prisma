// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  phone          String           @unique
  password       String
  fullname       String
  email          String           @unique
  address        String?
  birthday       DateTime?
  gender         Gender           @default(OTHER)
  role           Role             @default(PATIENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  doctor         Doctor?
  rating         Rating[]
  appointments   Appointment[]
  medicalHistory MedicalHistory[]
}

model Doctor {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  speciality     String
  degree         String
  experience     String
  rating         Rating[]
  appointments   Appointment[]
  medicalHistory MedicalHistory[]
  services       DoctorService[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  deletedAt      DateTime?
}

model Rating {
  id        Int       @id @default(autoincrement())
  patientId Int
  patient   User      @relation(fields: [patientId], references: [id])
  doctorId  Int
  doctor    Doctor?   @relation(fields: [doctorId], references: [id])
  rate      Float
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Appointment {
  id             Int               @id @default(autoincrement())
  patientId      Int
  patient        User              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId       Int
  doctor         Doctor?           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(PENDING)
  reasonCanceled String?
  serviceId      Int
  service        MedicalService    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deletedAt      DateTime?
}

model MedicalHistory {
  id            Int       @id @default(autoincrement())
  patientId     Int
  patient       User      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      Int
  doctor        Doctor?   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  symptons      String
  diagnosis     String
  treatment     String
  prescription  String
  admissionDate DateTime
  dischargeDate DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model MedicalService {
  id           Int             @id @default(autoincrement())
  name         String
  description  String
  price        Float
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  doctors      DoctorService[]
  appointments Appointment[]
}

model DoctorService {
  id             Int            @id @default(autoincrement())
  doctorId       Int
  doctor         Doctor         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  serviceId      Int
  medicalService MedicalService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  @@unique([doctorId, serviceId])
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED_BY_DOCTOR
  CANCELED_BY_PATIENT
}
